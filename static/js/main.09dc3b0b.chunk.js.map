{"version":3,"sources":["components/stepone.component.js","components/steptwo.component.js","App.js","serviceWorker.js","store/flagPickerMain.reducer.js","index.js"],"names":["flagPickerMainData","AutocompleteContinent","props","onChange","event","value","target","suggestions","length","regEx","RegExp","sort","filter","el","test","continent","setState","isActive","continentName","onFocus","console","log","map","onClick","state","this","className","index","getContinentName","key","e","renderedSuggestion","Component","connect","falgPickerMain","dispatch","type","SelectCountryFlag","App","getFlagPickerData","fetch","then","res","json","result","items","error","Boolean","window","location","hostname","match","innitialState","action","newState","rootReducer","combineReducers","store","createStore","applyMiddleware","next","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09dc3b0b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n \n// Imagine you have a list of flagPickerMainData that you'd like to autosuggest.\nconst flagPickerMainData = [\n\t{\n\t\t\"continent\": \"Africa\",\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"Nigeria\",\n\t\t\t\t\"flag\": \"ðŸ‡³ðŸ‡¬\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Ethiopia\",\n\t\t\t\t\"flag\": \"ðŸ‡ªðŸ‡¹\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Egypt\",\n\t\t\t\t\"flag\": \"ðŸ‡ªðŸ‡¬\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"DR Congo\",\n\t\t\t\t\"flag\": \"ðŸ‡¨ðŸ‡©\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"South Africa\",\n\t\t\t\t\"flag\": \"ðŸ‡¿ðŸ‡¦\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"continent\": \"America\",\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"USA\",\n\t\t\t\t\"flag\": \"ðŸ‡ºðŸ‡¸\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Brazil\",\n\t\t\t\t\"flag\": \"ðŸ‡§ðŸ‡·\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Mexico\",\n\t\t\t\t\"flag\": \"ðŸ‡²ðŸ‡½\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Colombia\",\n\t\t\t\t\"flag\": \"ðŸ‡¨ðŸ‡´\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Argentina\",\n\t\t\t\t\"flag\": \"ðŸ‡¦ðŸ‡·\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"continent\": \"Asia\",\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"China\",\n\t\t\t\t\"flag\": \"ðŸ‡¨ðŸ‡³\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"India\",\n\t\t\t\t\"flag\": \"ðŸ‡®ðŸ‡³\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Indonesia\",\n\t\t\t\t\"flag\": \"ðŸ‡®ðŸ‡©\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Pakistan\",\n\t\t\t\t\"flag\": \"ðŸ‡µðŸ‡°\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Bangladesh\",\n\t\t\t\t\"flag\": \"ðŸ‡§ðŸ‡©\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"continent\": \"Europe\",\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"Russia\",\n\t\t\t\t\"flag\": \"ðŸ‡·ðŸ‡º\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Germany\",\n\t\t\t\t\"flag\": \"ðŸ‡©ðŸ‡ª\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"UK\",\n\t\t\t\t\"flag\": \"ðŸ‡¬ðŸ‡§\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"France\",\n\t\t\t\t\"flag\": \"ðŸ‡«ðŸ‡·\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Italy\",\n\t\t\t\t\"flag\": \"ðŸ‡®ðŸ‡¹\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"continent\": \"Oceania\",\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"Australia\",\n\t\t\t\t\"flag\": \"ðŸ‡¦ðŸ‡º\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Papua New Guinea\",\n\t\t\t\t\"flag\": \"ðŸ‡µðŸ‡¬\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"New Zealand\",\n\t\t\t\t\"flag\": \"ðŸ‡³ðŸ‡¿\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Fiji\",\n\t\t\t\t\"flag\": \"ðŸ‡«ðŸ‡¯\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Solomon Islands\",\n\t\t\t\t\"flag\": \"ðŸ‡¸ðŸ‡§\"\n\t\t\t}\n\t\t]\n\t}\n]\n \nclass AutocompleteContinent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\t\t\tvalue: '',\n\t\t\tsuggestions: [],\n\t\t\tisActive: false,\n\t\t\tcontinentName: ''\n\t\t};\n\t\t\n\t\tconsole.log(\"Content Select: \", this.props.continentName);\n  }\n \n  onChange = (event) => {\n\t\tconst value = event.target.value;\n\t\tlet suggestions = []\n\n\t\tif(value.length > 0) {\n\t\t\tconst regEx = new RegExp(`^${value}`, 'i');\n\t\t\tsuggestions = flagPickerMainData.sort().filter(el => regEx.test(el.continent))\n\t\t}\n    this.setState({\n\t\t\tsuggestions,\n\t\t\tvalue: event.target.value,\n\t\t\tisActive: event.target.value ? false : true,\n\t\t\tcontinentName: event.target.value\n\t\t});\n\t};\n\n\tonFocus = (event) => {\n\t\tconsole.log(event);\n\t\tthis.setState({\n\t\t\tisActive:  false,\n\t\t\tsuggestions: flagPickerMainData.map(el => el)\n\t\t});\n\t}\n\n\tonClick = (event) => {\n\t\tthis.setState({\n\t\t\tsuggestions: [],\n\t\t\tcontinentName: event,\n\t\t\tisActive: true\n\t\t});\n\t}\n\n\trenderedSuggestion () {\n\t\tconst { suggestions } = this.state;\n\t\tconst { isActive } = this.props\n\t\tif(suggestions === 0){\n\t\t\treturn null;\n\t\t}else {\n\t\t\treturn(\n\t\t\t\t<ul className=\"list-group\" >\n\t\t\t\t\t{\n\t\t\t\t\t\tsuggestions.map((el, index) =>{\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li \n\t\t\t\t\t\t\t\t\tclassName=\"list-group-item\" \n\t\t\t\t\t\t\t\t\tonClick={() => {this.onClick(el.continent); this.props.getContinentName(el.continent)}} \n\t\t\t\t\t\t\t\t\tkey={index}>{el.continent}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</ul>\n\t\t\t)\n\t\t}\n\t}\n \n  render() {\n    return (\n\t\t\t<div className=\"col-sm-4\">\n\t\t\t\t<input className=\"form-control\" \n\t\t\t\t\tvalue={this.state.continentName} \n\t\t\t\t\tonFocus={this.onFocus} \n\t\t\t\t\tonChange={e => this.onChange(e)}\n\t\t\t\t/>\n\t\t\t\t{this.renderedSuggestion()}\n\t\t\t\t{\n\t\t\t\t\tthis.props.continentName === '' ? \n\t\t\t\t\tnull :\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h5> You selected</h5>\n\t\t\t\t\t\t<span>{this.props.continentName}</span>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    continentName: state.falgPickerMain.continentName\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    getContinentName: (continentName) => dispatch({type: 'AUTO_COMPLETE_CONTINENT_SELECT', continentName})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AutocompleteContinent);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\nclass SelectCountryFlag extends Component {\n\n    constructor(){\n        super()\n    }\n\n    render(){\n        return(\n            <div>\n                {this.props.continentName}\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      continentName: state.falgPickerMain.continentName\n    }\n  }\n\nexport default connect(mapStateToProps)(SelectCountryFlag);\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport AutocompleteContinent from './components/stepone.component';\nimport SelectCountryFlag from './components/steptwo.component';\n\nclass App extends Component {\n\n  constructor(){\n    super()\n  }\n\n\n  componentDidMount() {\n    this.getFlagPickerData();\n  }\n\n\n  getFlagPickerData() {\n      fetch(\"http://localhost:3000/assets/data.json\")\n        .then(res => res.json())\n        .then(\n          (result) => {\n            console.log(\"SDSDS\", result);\n            this.setState({\n              items: result\n            });\n          },\n          (error) => {\n            this.setState({\n              error\n            });\n          }\n        )\n    }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header>Flag Picker</header>\n        <AutocompleteContinent />\n        <SelectCountryFlag />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const innitialState = {\n    continentName: '',\n    isActive: false\n}\n\nconst falgPickerMain = (state = innitialState, action) =>{\n    const newState = {...state};\n\n    switch(action.type){\n        case \"AUTO_COMPLETE_CONTINENT_SELECT\":\n        return{\n            ...state,\n            continentName: action.continentName\n        }\n        break;\n    }\n\n    return newState;\n} \n\nexport default falgPickerMain;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//CSS\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n//Reducer\nimport falgPickerMain from './store/flagPickerMain.reducer';\n\nconst rootReducer = combineReducers({\n    falgPickerMain\n})\n\nconst logAction = (store) => {\n    return next => {\n        return action => {\n            const result = next(action);\n            console.log(\"result 1: \", result);\n            return result;\n        }\n    }\n}\n\nconst store = createStore(rootReducer, applyMiddleware(logAction));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}