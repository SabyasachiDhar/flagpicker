{"version":3,"sources":["components/stepone.component.js","components/checkbox.component.js","components/steptwo.component.js","components/stepthree.component.js","App.js","serviceWorker.js","store/flagPickerMain.reducer.js","index.js"],"names":["flagPickerMainData","AutocompleteContinent","props","onChange","event","value","target","suggestions","length","regEx","RegExp","sort","filter","el","test","continent","setState","isActive","continentName","onFocus","console","log","map","onClick","state","this","className","index","getContinentName","countries","key","e","renderedSuggestion","Component","connect","falgPickerMain","dispatch","countriesFlags","type","Checkbox","name","checked","SelectCountryFlag","handleChange","item","isChecked","prevState","checkedItems","set","Map","data-toggle","aria-haspopup","aria-expanded","flag","get","getSelectedFlag","aria-label","flagHistory","ShowFlag","clearSelectedFlag","App","Boolean","window","location","hostname","match","innitialState","action","newState","concat","rootReducer","combineReducers","store","createStore","applyMiddleware","next","result","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed8031f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n \n// Imagine you have a list of flagPickerMainData that you'd like to autosuggest.\nconst flagPickerMainData = [\n\t{\n\t\t\"continent\": \"Africa\",\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"Nigeria\",\n\t\t\t\t\"flag\": \"ðŸ‡³ðŸ‡¬\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Ethiopia\",\n\t\t\t\t\"flag\": \"ðŸ‡ªðŸ‡¹\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Egypt\",\n\t\t\t\t\"flag\": \"ðŸ‡ªðŸ‡¬\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"DR Congo\",\n\t\t\t\t\"flag\": \"ðŸ‡¨ðŸ‡©\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"South Africa\",\n\t\t\t\t\"flag\": \"ðŸ‡¿ðŸ‡¦\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"continent\": \"America\",\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"USA\",\n\t\t\t\t\"flag\": \"ðŸ‡ºðŸ‡¸\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Brazil\",\n\t\t\t\t\"flag\": \"ðŸ‡§ðŸ‡·\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Mexico\",\n\t\t\t\t\"flag\": \"ðŸ‡²ðŸ‡½\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Colombia\",\n\t\t\t\t\"flag\": \"ðŸ‡¨ðŸ‡´\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Argentina\",\n\t\t\t\t\"flag\": \"ðŸ‡¦ðŸ‡·\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"continent\": \"Asia\",\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"China\",\n\t\t\t\t\"flag\": \"ðŸ‡¨ðŸ‡³\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"India\",\n\t\t\t\t\"flag\": \"ðŸ‡®ðŸ‡³\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Indonesia\",\n\t\t\t\t\"flag\": \"ðŸ‡®ðŸ‡©\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Pakistan\",\n\t\t\t\t\"flag\": \"ðŸ‡µðŸ‡°\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Bangladesh\",\n\t\t\t\t\"flag\": \"ðŸ‡§ðŸ‡©\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"continent\": \"Europe\",\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"Russia\",\n\t\t\t\t\"flag\": \"ðŸ‡·ðŸ‡º\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Germany\",\n\t\t\t\t\"flag\": \"ðŸ‡©ðŸ‡ª\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"UK\",\n\t\t\t\t\"flag\": \"ðŸ‡¬ðŸ‡§\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"France\",\n\t\t\t\t\"flag\": \"ðŸ‡«ðŸ‡·\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Italy\",\n\t\t\t\t\"flag\": \"ðŸ‡®ðŸ‡¹\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"continent\": \"Oceania\",\n\t\t\"countries\": [\n\t\t\t{\n\t\t\t\t\"name\": \"Australia\",\n\t\t\t\t\"flag\": \"ðŸ‡¦ðŸ‡º\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Papua New Guinea\",\n\t\t\t\t\"flag\": \"ðŸ‡µðŸ‡¬\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"New Zealand\",\n\t\t\t\t\"flag\": \"ðŸ‡³ðŸ‡¿\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Fiji\",\n\t\t\t\t\"flag\": \"ðŸ‡«ðŸ‡¯\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Solomon Islands\",\n\t\t\t\t\"flag\": \"ðŸ‡¸ðŸ‡§\"\n\t\t\t}\n\t\t]\n\t}\n]\n \nclass AutocompleteContinent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\t\t\tvalue: '',\n\t\t\tsuggestions: [],\n\t\t\tisActive: false,\n\t\t\tcontinentName: ''\n\t\t};\n\t\t\n\t\tconsole.log(\"Content Select: \", this.props.continentName);\n  }\n \n  onChange = (event) => {\n\t\tconst value = event.target.value;\n\t\tlet suggestions = []\n\n\t\tif(value.length > 0) {\n\t\t\tconst regEx = new RegExp(`^${value}`, 'i');\n\t\t\tsuggestions = flagPickerMainData.sort().filter(el => regEx.test(el.continent))\n\t\t}\n    this.setState({\n\t\t\tsuggestions,\n\t\t\tvalue: event.target.value,\n\t\t\tisActive: event.target.value ? false : true,\n\t\t\tcontinentName: event.target.value\n\t\t});\n\t};\n\n\tonFocus = (event) => {\n\t\tconsole.log(event);\n\t\tthis.setState({\n\t\t\tisActive:  false,\n\t\t\tsuggestions: flagPickerMainData.map(el => el)\n\t\t});\n\t}\n\n\tonClick = (event) => {\n\t\tthis.setState({\n\t\t\tsuggestions: [],\n\t\t\tcontinentName: event,\n\t\t\tisActive: true\n\t\t});\n\t}\n\n\trenderedSuggestion () {\n\t\tconst { suggestions } = this.state;\n\t\tif(suggestions === 0){\n\t\t\treturn null;\n\t\t}else {\n\t\t\treturn(\n\t\t\t\t<div className=\"list-cust\">\n\t\t\t\t\t<ul className=\"list-group list-group-cust\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsuggestions.map((el, index) =>{\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li \n\t\t\t\t\t\t\t\t\t\tclassName=\"list-group-item list-group-item-action\" \n\t\t\t\t\t\t\t\t\t\tonClick={() => {this.onClick(el.continent); this.props.getContinentName(el.continent, el.countries)}} \n\t\t\t\t\t\t\t\t\t\tkey={index}>{el.continent}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n \n  render() {\n    return (\n\t\t<div className=\"card card-cust\">\n\t\t\t<div className=\"card-body\">\n\t\t\t\t<h5 className=\"card-title\">Step 1</h5>\n\t\t\t\t<p className=\"card-text\">Select a continent</p>\n\t\t\t\t<input className=\"form-control\" \n\t\t\t\t\tvalue={this.state.continentName} \n\t\t\t\t\tonFocus={this.onFocus} \n\t\t\t\t\tonChange={e => this.onChange(e)}\n\t\t\t\t/>\n\t\t\t\t{this.renderedSuggestion()}\n\t\t\t\t{\n\t\t\t\t\tthis.state.continentName \n\t\t\t\t\t? \n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p className=\"pt-5\">You selected</p>\n\t\t\t\t\t\t<h5> {this.props.continentName}</h5>\n\t\t\t\t\t</div>\n\t\t\t\t\t:\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    continentName: state.falgPickerMain.continentName\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    getContinentName: (continentName, countriesFlags) => dispatch({type: 'AUTO_COMPLETE_CONTINENT_SELECT', continentName, countriesFlags})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AutocompleteContinent);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Checkbox = ({ type = 'checkbox', name, checked = false, onChange}) => (\n  <input className=\"mr-2 check-box-cust\" type={type} name={name} checked={checked} onChange={onChange} />\n);\n\nCheckbox.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func\n}\n\nexport default Checkbox;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Checkbox  from './checkbox.component';\n\n\nclass SelectCountryFlag extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            isChecked: false,\n            checkedItems: new Map()\n        }\n    }\n\n    handleChange = (e) => {\n        console.log(e.target);\n        const item = e.target.name;\n        const isChecked = e.target.checked;\n        this.setState(prevState => ({ checkedItems: prevState.checkedItems.set(item, isChecked) }));\n        console.log(\"ha\", isChecked);\n    }\n\n    render(){\n        return(\n            <div>\n                {\n                    this.props.countriesFlags.length > 0\n                    ?\n                    <div className=\"card card-cust\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">Step 2</h5>\n                            <p className=\"card-text\">Select a Country of {this.props.continentName}</p>\n                            <div className=\"input-group mb-3\">\n                            <div className=\"input-group-prepend\">\n                                <button type=\"button\" className=\"btn btn-outline-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                </button>\n                                <div className=\"dropdown-menu show\">\n                                {\n                                    this.props.countriesFlags.map((el, index) => {\n                                        return(\n                                            <span className=\"dropdown-item\" key={index}>\n                                                <Checkbox name={el.flag} checked={this.state.checkedItems.get(el.flag)} onChange={(e)=> {this.handleChange(e); this.props.getSelectedFlag(e, el.flag, this.state.checkedItems.get(el.flag))}}/>{el.name}{el.flag}\n                                            </span>\n                                        )\n                                    })\n                                }\n                                </div>\n                            </div>\n                            <input type=\"text\" className=\"form-control\" aria-label=\"Text input with segmented dropdown button\" />\n                            </div>\n\n\n\n\n\n\n                        \n                            \n                        </div>\n                    </div>\n                    : null\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        continentName: state.falgPickerMain.continentName,\n        countriesFlags: state.falgPickerMain.countriesFlags\n    }   \n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        getSelectedFlag: (event, flagHistory, isChecked) => dispatch({type: 'GET_SELECTED_FLAG',event, flagHistory, isChecked})\n    }\n  }\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectCountryFlag);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass ShowFlag extends Component{\n\n    render(){\n        return(\n            <div>\n                {\n                    this.props.flagHistory.length > 0\n                    ?\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            {\n                                this.props.flagHistory.map((el, index) => {\n                                    return <span key={index}> {el} </span>\n                                })\n                            }\n                            <div>\n                                <button className=\"btn btn-primary\" onClick={()=> this.props.clearSelectedFlag()}> Reset Flag </button>\n                            </div>\n                        </div>\n                    </div>\n                    : null\n                }\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        flagHistory: state.falgPickerMain.flagHistory\n    }   \n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        clearSelectedFlag: () => dispatch({type: 'CLEAR_SELECTED_FLAG_HISTORY'})\n    }\n  }\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowFlag);","import React, { Component } from 'react';\nimport './App.css';\nimport AutocompleteContinent from './components/stepone.component';\nimport SelectCountryFlag from './components/steptwo.component';\nimport  ShowFlag from './components/stepthree.component'\n\nclass App extends Component {\n\n  render(){\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar navbar-dark bg-dark\">\n          <span className=\"navbar-brand mb-0 h1\">Flag Picker</span>\n        </nav>\n        <div className=\"jumbotron jumbotron-fluid pad2\">\n          <div className=\"container\">\n            <h5>Flag Picker</h5>\n            <p className=\"lead\">This app help you to leam flags around the world in 3 steps</p>\n          </div>\n        </div>\n\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-sm-4\"><AutocompleteContinent /></div>\n            <div className=\"col-sm-4\"><SelectCountryFlag /></div>\n            <div className=\"col-sm-4\"><ShowFlag /></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const innitialState = {\n    continentName: '',\n    isActive: false,\n    countriesFlags: [],\n    flagHistory: [],\n    isChecked: false,\n    checkedItems: new Map()\n}\n\nconst falgPickerMain = (state = innitialState, action) =>{\n    const newState = {...state};\n\n    switch(action.type){\n        case \"AUTO_COMPLETE_CONTINENT_SELECT\":\n        return{\n            ...state,\n            continentName: action.continentName,\n            countriesFlags: action.countriesFlags\n        }\n        break;\n\n        case \"GET_SELECTED_FLAG\":\n        return{\n            ...state,\n            flagHistory: state.flagHistory.concat(action.flagHistory),\n            isChecked: action.isChecked,\n            \n        }\n        break;\n\n        case \"CLEAR_SELECTED_FLAG_HISTORY\":\n        return{\n            ...state,\n            flagHistory: state.flagHistory = []\n        }\n        break;\n    }\n\n    return newState;\n} \n\nexport default falgPickerMain;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//CSS\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n//Reducer\nimport falgPickerMain from './store/flagPickerMain.reducer';\n\nconst rootReducer = combineReducers({\n    falgPickerMain\n})\n\nconst logAction = (store) => {\n    return next => {\n        return action => {\n            const result = next(action);\n            console.log(\"result 1: \", result);\n            return result;\n        }\n    }\n}\n\nconst store = createStore(rootReducer, applyMiddleware(logAction));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}